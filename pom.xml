<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.minacontrol</groupId>
    <artifactId>mina-control-api</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <name>MinaControl Pro - Sistema de Gestión Minera</name>
    <description>Sistema integral para gestión de operaciones mineras de carbón en Socha, Boyacá</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>

    <properties>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <org.mapstruct.version>1.5.5.Final</org.mapstruct.version>
        <lombok.version>1.18.30</lombok.version>
        <lombok-mapstruct-binding.version>0.2.0</lombok-mapstruct-binding.version>
    </properties>

    <dependencies>
        <!-- ========== CORE ESENCIAL ========== -->
        <!-- Spring Boot Web: Servidor web embebido (Tomcat) + APIs REST + JSON automático -->
        <!-- PARA QUÉ: Crear endpoints como /api/empleados, /api/produccion sin configurar servidor -->
        <!-- INCLUYE: @RestController, @RequestMapping, Jackson para JSON, validaciones HTTP -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <!-- ========== BASE DE DATOS (DESARROLLO) ========== -->
        <!-- Spring Boot Data JPA: Abstracción para acceso a datos con JPA (Hibernate) -->
        <!-- PARA QUÉ: Simplificar la interacción con la base de datos (Repositorios) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <!-- H2: Base de datos en memoria, para desarrollo y testing -->
        <!-- PARA QUÉ: Pruebas de integración rápidas y desarrollo local sin Docker -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        
        <!-- ========== BASE DE DATOS (PRODUCCIÓN) ========== -->
        <!-- Driver de PostgreSQL: Conector para la base de datos de producción -->
        <!-- PARA QUÉ: Permitir que la aplicación se conecte a PostgreSQL -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
        
        <!-- ========== SEGURIDAD ========== -->
        <!-- Spring Boot Starter Security: Autenticación y autorización -->
        <!-- PARA QUÉ: Proteger endpoints, gestionar usuarios, roles, contraseñas -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- ========== VALIDACIONES ========== -->
        <!-- Spring Boot Validation: Validaciones automáticas para DTOs y entidades -->
        <!-- PARA QUÉ: Validar datos de empleados (@NotNull, @Size, @Email, etc.) -->
        <!-- EJEMPLO: @Valid en controllers, @NotBlank en campos obligatorios de Empleado -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- ========== DOCUMENTACIÓN API (OpenAPI/Swagger) ========== -->
        <!-- SpringDoc OpenAPI: Genera automáticamente la documentación de la API en formato OpenAPI 3 -->
        <!-- PARA QUÉ: Crear una UI de Swagger para visualizar y probar los endpoints -->
        <!-- URL: http://localhost:8080/swagger-ui.html -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.2.0</version>
        </dependency>

        <!-- ========== MAPSTRUCT (Mapeo de DTOs) ========== -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${org.mapstruct.version}</version>
        </dependency>
        
        <!-- ========== UTILIDADES DE DESARROLLO ========== -->
        <!-- Lombok: Genera automáticamente getters, setters, constructores, toString -->
        <!-- PARA QUÉ: Reducir código boilerplate en entidades y DTOs -->
        <!-- EJEMPLO: @Data, @Builder, @AllArgsConstructor en clase Empleado -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!-- ========== TESTING ========== -->
        <!-- Spring Boot Test: Framework completo de testing (JUnit 5, MockMvc, TestContainers) -->
        <!-- PARA QUÉ: Tests unitarios e integración de APIs REST -->
        <!-- INCLUYE: @SpringBootTest, @WebMvcTest, MockMvc para testing de controllers -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Spring Security Test: Utilidades para probar la seguridad en Spring Boot -->
        <!-- PARA QUÉ: Simular usuarios autenticados en tests de integración de controladores -->
        <!-- EJEMPLO: @WithMockUser en tests de controladores -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Plugin principal de Spring Boot para empaquetar aplicación ejecutable -->
            <!-- PARA QUÉ: Crear JAR ejecutable con 'mvn spring-boot:run' -->
            <!-- COMANDOS: mvn spring-boot:run (desarrollo), mvn package (producción) -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <!-- Excluir Lombok del JAR final (solo necesario en compilación) -->
                        <!-- Eliminada exclusión de Lombok -->
                    </excludes>
                </configuration>
            </plugin>

            <!-- Plugin de Compilador de Maven -->
            <!-- PARA QUÉ: Configurar el procesador de anotaciones para Lombok y MapStruct -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${org.mapstruct.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                            <version>${lombok-mapstruct-binding.version}</version>
                        </path>
                    </annotationProcessorPaths>
                    <compilerArgs>
                        <compilerArg>
                            -Amapstruct.defaultComponentModel=spring
                        </compilerArg>
                    </compilerArgs>
                </configuration>
            </plugin>

            <!-- Plugin Failsafe para Pruebas de Integración -->
            <!-- PARA QUÉ: Ejecutar pruebas que terminan en *IT.java -->
            <!-- COMANDOS: Se activa automáticamente con 'mvn verify' -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>3.1.2</version> <!-- Usa una versión consistente con surefire -->
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
