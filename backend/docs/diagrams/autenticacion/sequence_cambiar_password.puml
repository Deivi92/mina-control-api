@startuml sequence_cambiar_password
!theme plain

title "Flujo de Cambio de Contraseña"

actor Usuario
participant "Cliente (Frontend)" as Cliente
participant "API Gateway" as Gateway
participant "Servicio de Autenticación" as AuthServer
participant "Base de Datos" as DB

alt Cambio de contraseña normal (usuario autenticado)
    Usuario -> Cliente: Ingresa contraseña actual y nueva contraseña
    Cliente -> Gateway: POST /auth/change-password (passwordActual, passwordNueva)
    Gateway -> AuthServer: POST /auth/change-password (datos de cambio)

    AuthServer -> DB: Buscar usuario por ID del token JWT
    DB --> AuthServer: Retorna datos del usuario con hash de contraseña actual

    alt Contraseña actual es correcta
        AuthServer -> AuthServer: Validar que nueva contraseña cumple políticas
        alt Nueva contraseña válida
            AuthServer -> AuthServer: Hashear nueva contraseña
            AuthServer -> DB: Actualizar hash de contraseña
            DB --> AuthServer: Confirma actualización
            AuthServer --> Gateway: Devuelve mensaje de éxito
            Gateway --> Cliente: 200 OK (Contraseña cambiada)
            Cliente -> Usuario: Muestra mensaje de éxito
        else Nueva contraseña no válida
            AuthServer --> Gateway: Devuelve error de validación
            Gateway --> Cliente: 400 Bad Request (Política de contraseña no cumplida)
            Cliente -> Usuario: Muestra mensaje de error
        end
    else Contraseña actual incorrecta
        AuthServer --> Gateway: Devuelve error de autenticación
        Gateway --> Cliente: 401 Unauthorized (Contraseña actual incorrecta)
        Cliente -> Usuario: Muestra mensaje de error
    end
else Cambio de contraseña por recuperación (usando token de reseteo)
    Usuario -> Cliente: Ingresa token de reseteo y nueva contraseña
    Cliente -> Gateway: POST /auth/change-password (token, passwordNueva)
    Gateway -> AuthServer: POST /auth/change-password (token, passwordNueva)

    AuthServer -> AuthServer: Validar token de reseteo (validez, expiración, usuario)
    alt Token de reseteo válido
        AuthServer -> AuthServer: Validar que nueva contraseña cumple políticas
        alt Nueva contraseña válida
            AuthServer -> AuthServer: Hashear nueva contraseña
            AuthServer -> DB: Actualizar hash de contraseña
            AuthServer -> DB: Invalidar token de reseteo
            DB --> AuthServer: Confirma actualización
            AuthServer --> Gateway: Devuelve mensaje de éxito
            Gateway --> Cliente: 200 OK (Contraseña cambiada)
            Cliente -> Usuario: Muestra mensaje de éxito
        else Nueva contraseña no válida
            AuthServer --> Gateway: Devuelve error de validación
            Gateway --> Cliente: 400 Bad Request (Política de contraseña no cumplida)
            Cliente -> Usuario: Muestra mensaje de error
        end
    else Token de reseteo inválido o expirado
        AuthServer --> Gateway: Devuelve error de autenticación
        Gateway --> Cliente: 400 Bad Request (Token inválido o expirado)
        Cliente -> Usuario: Muestra mensaje de error
    end
end

@enduml
